i=1
TP = 0
FN = 0
FP = 0
TN = 0
file_annotation <- paste(anotDir, annotation_files[i], sep = "/")
d = str_sub(annotation_files[i],1,4)
dep = rbind(dep,d)
annotations <-   read.table(file_annotation, header = TRUE, sep = "\t")
# Remove annotation type 'waveform'
annotations <- subset(annotations, annotations$View == "Spectrogram 1")
# Get file start timestamps to convert annotation begin times to absolute timestamps
fileStarts = parse_date_time(str_extract(annotations$Begin.File,"\\d{8}_\\d{6}"),"Ymd_HMS")
annotations$StartTime = fileStarts + dseconds(annotations$File.Offset..s.)
annotations$EndTime = annotations$StartTime + dseconds(annotations$Delta.Time..s.)
# Sort into ascending start time order, reset row numbers
annotations = annotations[order(annotations$StartTime),]
rownames(annotations) = 1:nrow(annotations)
# Find corresponding detector output selection table
matchingFile = str_which(detection_files,d)
file_detec <-  paste(detDir,detection_files[matchingFile],sep = "/")
detections <- read.table(file_detec, header = TRUE, sep = "\t")
# Remove detection type 'waveform'
detections <- subset(detections, detections$View == "Spectrogram 1")
# Get file start timestamps to convert detection begin times to absolute timestamps
fileStarts = parse_date_time(str_extract(detections$Begin.File,"\\d{8}_\\d{6}"),"Ymd_HMS")
detections$StartTime = fileStarts + dseconds(detections$File.Offset..s.)
detections$EndTime = detections$StartTime + dseconds(detections$Delta.Time..s.)
# Sort into ascending start time order, reset row numbers
detections = detections[order(detections$StartTime),]
rownames(detections) = 1:nrow(detections)
# Find corresponding list file
matchingFile = str_which(list_files,d)
file_list <-  paste(listDir,list_files[matchingFile],sep = "/")
fileList <- read.table(file_list, header = FALSE, sep = "\t")
# Get start times of file set
fileStarts = parse_date_time(str_extract(fileList[,1],"\\d{8}_\\d{6}"),'Ymd_HMS')
# Establish time bins consistent with how the detector saw the data (assumed to be bin)
seqFun <- Vectorize(function(x,y) seq.POSIXt(x,y,by=detections$Delta.Time..s.[1]))
timeBins = as_datetime(c(seqFun(fileStarts,(fileStarts+dseconds(899)))))
# Determine full set of channels any annotations or detections exist in
allChans = sort(unique(c(annotations$Channel,detections$Channel)))
# Determine full set of channels any annotations or detections exist in
allChans = sort(unique(c(annotations$Channel,detections$Channel)))
allChans = c(1,2,7,10)
j=1
temp1 = data.frame()
temp2 = data.frame()
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
if (length(anInd)>0){
whichBinsA = numeric()
for (k in 1:length(anInd)){
whichStart = which(timeBins<=annotations$StartTime[anInd[k]]) # which bin contains annotation start time
whichStart = whichStart[length(whichStart)]
whichEnd = which(timeBins>=annotations$EndTime[anInd[k]]) # which bin contains annotation end time
whichEnd = whichEnd[1]
if (whichEnd-whichStart==1){ # if annotation falls within a single bin
whichBinsA = c(whichBinsA,whichStart)
} else if (whichEnd-whichStart>1){ # if annotation spans more than one bin, only count bins that have enough of the annotation in them
if (timeBins[whichStart+1]-annotations$StartTime[anInd[k]] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichStart)
}
if (whichEnd-whichStart>2){
whichBinsA = c(whichBinsA,seq(whichStart+1,whichEnd-2,by=1))
}
if (annotations$EndTime[anInd[k]]-timeBins[whichEnd-1] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichEnd-1)
}
}
}
binswAnnots = timeBins[whichBinsA]
} else {
whichBinsA = numeric()
binswAnnots = numeric()
}
# In case of multiple annotations occurring in the same bin, remove duplicate bin counts
binswAnnots = unique(binswAnnots)
# Determine which bins have detections in this channel
detInd = which(detections$Channel==allChans[j])
whichBinsD = histc(as.numeric(detections$StartTime[detInd]),as.numeric(timeBins))
binswDets = timeBins[which(whichBinsD$cnt>0)]
sharedCalls = intersect(binswAnnots,binswDets)
missedCalls = setdiff(binswAnnots,as_datetime(sharedCalls))
badDets = setdiff(binswDets,sharedCalls)
trueAbs = setdiff(timeBins,c(sharedCalls,missedCalls,badDets))
TP = TP + length(sharedCalls)
FN = FN + length(missedCalls)
FP = FP + length(badDets)
TN = TN + length(trueAbs)
TPind = which(detections$StartTime[detInd] %in% sharedCalls)
FPind = which(detections$StartTime[detInd] %in% badDets)
if (length(detInd)>0){ # start collecting information for this channel
temp1 = data.frame(TimeBin = binswDets) # time bin
temp1$Channel = allChans[j]             # channel
temp1$True = 0                          # Was there a call truly present?
temp1$True[TPind] = 1
temp1$Detected = 1                      # Was a call detected?
temp1$Conf = detections$Score[detInd]   # confidence scores of detections
}
if (length(missedCalls)>0){
temp2 = data.frame(TimeBin = as_datetime(missedCalls))
temp2$Channel = allChans[j]
temp2$True = 1
temp2$Detected = 0
temp2$Conf = NA
}
if (j==1){
eval(parse(text=paste(d,' = rbind(temp1,temp2)',sep="")))
} else {
eval(parse(text=paste(d,' = do.call(\"rbind\",list(',d,',temp1,temp2))',sep="")))
}
j=2
temp1 = data.frame()
temp2 = data.frame()
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
if (length(anInd)>0){
whichBinsA = numeric()
for (k in 1:length(anInd)){
whichStart = which(timeBins<=annotations$StartTime[anInd[k]]) # which bin contains annotation start time
whichStart = whichStart[length(whichStart)]
whichEnd = which(timeBins>=annotations$EndTime[anInd[k]]) # which bin contains annotation end time
whichEnd = whichEnd[1]
if (whichEnd-whichStart==1){ # if annotation falls within a single bin
whichBinsA = c(whichBinsA,whichStart)
} else if (whichEnd-whichStart>1){ # if annotation spans more than one bin, only count bins that have enough of the annotation in them
if (timeBins[whichStart+1]-annotations$StartTime[anInd[k]] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichStart)
}
if (whichEnd-whichStart>2){
whichBinsA = c(whichBinsA,seq(whichStart+1,whichEnd-2,by=1))
}
if (annotations$EndTime[anInd[k]]-timeBins[whichEnd-1] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichEnd-1)
}
}
}
binswAnnots = timeBins[whichBinsA]
} else {
whichBinsA = numeric()
binswAnnots = numeric()
}
# In case of multiple annotations occurring in the same bin, remove duplicate bin counts
binswAnnots = unique(binswAnnots)
# Determine which bins have detections in this channel
detInd = which(detections$Channel==allChans[j])
whichBinsD = histc(as.numeric(detections$StartTime[detInd]),as.numeric(timeBins))
binswDets = timeBins[which(whichBinsD$cnt>0)]
sharedCalls = intersect(binswAnnots,binswDets)
missedCalls = setdiff(binswAnnots,as_datetime(sharedCalls))
badDets = setdiff(binswDets,sharedCalls)
trueAbs = setdiff(timeBins,c(sharedCalls,missedCalls,badDets))
TP = TP + length(sharedCalls)
FN = FN + length(missedCalls)
FP = FP + length(badDets)
TN = TN + length(trueAbs)
TPind = which(detections$StartTime[detInd] %in% sharedCalls)
FPind = which(detections$StartTime[detInd] %in% badDets)
if (length(detInd)>0){ # start collecting information for this channel
temp1 = data.frame(TimeBin = binswDets) # time bin
temp1$Channel = allChans[j]             # channel
temp1$True = 0                          # Was there a call truly present?
temp1$True[TPind] = 1
temp1$Detected = 1                      # Was a call detected?
temp1$Conf = detections$Score[detInd]   # confidence scores of detections
}
if (length(missedCalls)>0){
temp2 = data.frame(TimeBin = as_datetime(missedCalls))
temp2$Channel = allChans[j]
temp2$True = 1
temp2$Detected = 0
temp2$Conf = NA
}
if (j==1){
eval(parse(text=paste(d,' = rbind(temp1,temp2)',sep="")))
} else {
eval(parse(text=paste(d,' = do.call(\"rbind\",list(',d,',temp1,temp2))',sep="")))
}
j=3
temp1 = data.frame()
temp2 = data.frame()
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
if (length(anInd)>0){
whichBinsA = numeric()
for (k in 1:length(anInd)){
whichStart = which(timeBins<=annotations$StartTime[anInd[k]]) # which bin contains annotation start time
whichStart = whichStart[length(whichStart)]
whichEnd = which(timeBins>=annotations$EndTime[anInd[k]]) # which bin contains annotation end time
whichEnd = whichEnd[1]
if (whichEnd-whichStart==1){ # if annotation falls within a single bin
whichBinsA = c(whichBinsA,whichStart)
} else if (whichEnd-whichStart>1){ # if annotation spans more than one bin, only count bins that have enough of the annotation in them
if (timeBins[whichStart+1]-annotations$StartTime[anInd[k]] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichStart)
}
if (whichEnd-whichStart>2){
whichBinsA = c(whichBinsA,seq(whichStart+1,whichEnd-2,by=1))
}
if (annotations$EndTime[anInd[k]]-timeBins[whichEnd-1] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichEnd-1)
}
}
}
binswAnnots = timeBins[whichBinsA]
} else {
whichBinsA = numeric()
binswAnnots = numeric()
}
# In case of multiple annotations occurring in the same bin, remove duplicate bin counts
binswAnnots = unique(binswAnnots)
# Determine which bins have detections in this channel
detInd = which(detections$Channel==allChans[j])
whichBinsD = histc(as.numeric(detections$StartTime[detInd]),as.numeric(timeBins))
binswDets = timeBins[which(whichBinsD$cnt>0)]
sharedCalls = intersect(binswAnnots,binswDets)
missedCalls = setdiff(binswAnnots,as_datetime(sharedCalls))
badDets = setdiff(binswDets,sharedCalls)
trueAbs = setdiff(timeBins,c(sharedCalls,missedCalls,badDets))
TP = TP + length(sharedCalls)
FN = FN + length(missedCalls)
FP = FP + length(badDets)
TN = TN + length(trueAbs)
TPind = which(detections$StartTime[detInd] %in% sharedCalls)
FPind = which(detections$StartTime[detInd] %in% badDets)
if (length(detInd)>0){ # start collecting information for this channel
temp1 = data.frame(TimeBin = binswDets) # time bin
temp1$Channel = allChans[j]             # channel
temp1$True = 0                          # Was there a call truly present?
temp1$True[TPind] = 1
temp1$Detected = 1                      # Was a call detected?
temp1$Conf = detections$Score[detInd]   # confidence scores of detections
}
if (length(missedCalls)>0){
temp2 = data.frame(TimeBin = as_datetime(missedCalls))
temp2$Channel = allChans[j]
temp2$True = 1
temp2$Detected = 0
temp2$Conf = NA
}
if (j==1){
eval(parse(text=paste(d,' = rbind(temp1,temp2)',sep="")))
} else {
eval(parse(text=paste(d,' = do.call(\"rbind\",list(',d,',temp1,temp2))',sep="")))
}
j=4
temp1 = data.frame()
temp2 = data.frame()
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
allChans[j]
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
if (length(anInd)>0){
whichBinsA = numeric()
for (k in 1:length(anInd)){
whichStart = which(timeBins<=annotations$StartTime[anInd[k]]) # which bin contains annotation start time
whichStart = whichStart[length(whichStart)]
whichEnd = which(timeBins>=annotations$EndTime[anInd[k]]) # which bin contains annotation end time
whichEnd = whichEnd[1]
if (whichEnd-whichStart==1){ # if annotation falls within a single bin
whichBinsA = c(whichBinsA,whichStart)
} else if (whichEnd-whichStart>1){ # if annotation spans more than one bin, only count bins that have enough of the annotation in them
if (timeBins[whichStart+1]-annotations$StartTime[anInd[k]] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichStart)
}
if (whichEnd-whichStart>2){
whichBinsA = c(whichBinsA,seq(whichStart+1,whichEnd-2,by=1))
}
if (annotations$EndTime[anInd[k]]-timeBins[whichEnd-1] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichEnd-1)
}
}
}
binswAnnots = timeBins[whichBinsA]
} else {
whichBinsA = numeric()
binswAnnots = numeric()
}
# In case of multiple annotations occurring in the same bin, remove duplicate bin counts
binswAnnots = unique(binswAnnots)
# Determine which bins have detections in this channel
detInd = which(detections$Channel==allChans[j])
whichBinsD = histc(as.numeric(detections$StartTime[detInd]),as.numeric(timeBins))
binswDets = timeBins[which(whichBinsD$cnt>0)]
sharedCalls = intersect(binswAnnots,binswDets)
missedCalls = setdiff(binswAnnots,as_datetime(sharedCalls))
badDets = setdiff(binswDets,sharedCalls)
trueAbs = setdiff(timeBins,c(sharedCalls,missedCalls,badDets))
length(sharedCalls)
TP = TP + length(sharedCalls)
FN = FN + length(missedCalls)
FP = FP + length(badDets)
TN = TN + length(trueAbs)
TPind = which(detections$StartTime[detInd] %in% sharedCalls)
FPind = which(detections$StartTime[detInd] %in% badDets)
if (length(detInd)>0){ # start collecting information for this channel
temp1 = data.frame(TimeBin = binswDets) # time bin
temp1$Channel = allChans[j]             # channel
temp1$True = 0                          # Was there a call truly present?
temp1$True[TPind] = 1
temp1$Detected = 1                      # Was a call detected?
temp1$Conf = detections$Score[detInd]   # confidence scores of detections
}
if (length(missedCalls)>0){
temp2 = data.frame(TimeBin = as_datetime(missedCalls))
temp2$Channel = allChans[j]
temp2$True = 1
temp2$Detected = 0
temp2$Conf = NA
}
if (j==1){
eval(parse(text=paste(d,' = rbind(temp1,temp2)',sep="")))
} else {
eval(parse(text=paste(d,' = do.call(\"rbind\",list(',d,',temp1,temp2))',sep="")))
}
perfDF[i,2] = TP
perfDF[i,3] = FP
perfDF[i,4] = FN
perfDF[i,5] = TN
View(perfDF)
View(annotations)
i=2
TP = 0
FN = 0
FP = 0
TN = 0
file_annotation <- paste(anotDir, annotation_files[i], sep = "/")
d = str_sub(annotation_files[i],1,4)
dep = rbind(dep,d)
annotations <-   read.table(file_annotation, header = TRUE, sep = "\t")
# Remove annotation type 'waveform'
annotations <- subset(annotations, annotations$View == "Spectrogram 1")
# Get file start timestamps to convert annotation begin times to absolute timestamps
fileStarts = parse_date_time(str_extract(annotations$Begin.File,"\\d{8}_\\d{6}"),"Ymd_HMS")
annotations$StartTime = fileStarts + dseconds(annotations$File.Offset..s.)
annotations$EndTime = annotations$StartTime + dseconds(annotations$Delta.Time..s.)
# Sort into ascending start time order, reset row numbers
annotations = annotations[order(annotations$StartTime),]
rownames(annotations) = 1:nrow(annotations)
# Find corresponding detector output selection table
matchingFile = str_which(detection_files,d)
file_detec <-  paste(detDir,detection_files[matchingFile],sep = "/")
detections <- read.table(file_detec, header = TRUE, sep = "\t")
# Remove detection type 'waveform'
detections <- subset(detections, detections$View == "Spectrogram 1")
# Get file start timestamps to convert detection begin times to absolute timestamps
fileStarts = parse_date_time(str_extract(detections$Begin.File,"\\d{8}_\\d{6}"),"Ymd_HMS")
detections$StartTime = fileStarts + dseconds(detections$File.Offset..s.)
detections$EndTime = detections$StartTime + dseconds(detections$Delta.Time..s.)
# Sort into ascending start time order, reset row numbers
detections = detections[order(detections$StartTime),]
rownames(detections) = 1:nrow(detections)
# Find corresponding list file
matchingFile = str_which(list_files,d)
file_list <-  paste(listDir,list_files[matchingFile],sep = "/")
fileList <- read.table(file_list, header = FALSE, sep = "\t")
# Get start times of file set
fileStarts = parse_date_time(str_extract(fileList[,1],"\\d{8}_\\d{6}"),'Ymd_HMS')
# Establish time bins consistent with how the detector saw the data (assumed to be bin)
seqFun <- Vectorize(function(x,y) seq.POSIXt(x,y,by=detections$Delta.Time..s.[1]))
timeBins = as_datetime(c(seqFun(fileStarts,(fileStarts+dseconds(899)))))
# Determine full set of channels any annotations or detections exist in
allChans = sort(unique(c(annotations$Channel,detections$Channel)))
allChans = c(1,2,7,10)
j=1
temp1 = data.frame()
temp2 = data.frame()
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
if (length(anInd)>0){
whichBinsA = numeric()
for (k in 1:length(anInd)){
whichStart = which(timeBins<=annotations$StartTime[anInd[k]]) # which bin contains annotation start time
whichStart = whichStart[length(whichStart)]
whichEnd = which(timeBins>=annotations$EndTime[anInd[k]]) # which bin contains annotation end time
whichEnd = whichEnd[1]
if (whichEnd-whichStart==1){ # if annotation falls within a single bin
whichBinsA = c(whichBinsA,whichStart)
} else if (whichEnd-whichStart>1){ # if annotation spans more than one bin, only count bins that have enough of the annotation in them
if (timeBins[whichStart+1]-annotations$StartTime[anInd[k]] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichStart)
}
if (whichEnd-whichStart>2){
whichBinsA = c(whichBinsA,seq(whichStart+1,whichEnd-2,by=1))
}
if (annotations$EndTime[anInd[k]]-timeBins[whichEnd-1] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichEnd-1)
}
}
}
binswAnnots = timeBins[whichBinsA]
} else {
whichBinsA = numeric()
binswAnnots = numeric()
}
# In case of multiple annotations occurring in the same bin, remove duplicate bin counts
binswAnnots = unique(binswAnnots)
# Determine which bins have detections in this channel
detInd = which(detections$Channel==allChans[j])
whichBinsD = histc(as.numeric(detections$StartTime[detInd]),as.numeric(timeBins))
binswDets = timeBins[which(whichBinsD$cnt>0)]
sharedCalls = intersect(binswAnnots,binswDets)
missedCalls = setdiff(binswAnnots,as_datetime(sharedCalls))
badDets = setdiff(binswDets,sharedCalls)
trueAbs = setdiff(timeBins,c(sharedCalls,missedCalls,badDets))
TP = TP + length(sharedCalls)
FN = FN + length(missedCalls)
FP = FP + length(badDets)
TN = TN + length(trueAbs)
TPind = which(detections$StartTime[detInd] %in% sharedCalls)
FPind = which(detections$StartTime[detInd] %in% badDets)
if (length(detInd)>0){ # start collecting information for this channel
temp1 = data.frame(TimeBin = binswDets) # time bin
temp1$Channel = allChans[j]             # channel
temp1$True = 0                          # Was there a call truly present?
temp1$True[TPind] = 1
temp1$Detected = 1                      # Was a call detected?
temp1$Conf = detections$Score[detInd]   # confidence scores of detections
}
if (length(missedCalls)>0){
temp2 = data.frame(TimeBin = as_datetime(missedCalls))
temp2$Channel = allChans[j]
temp2$True = 1
temp2$Detected = 0
temp2$Conf = NA
}
if (j==1){
eval(parse(text=paste(d,' = rbind(temp1,temp2)',sep="")))
} else {
eval(parse(text=paste(d,' = do.call(\"rbind\",list(',d,',temp1,temp2))',sep="")))
}
for (j in 1:length(allChans)){
temp1 = data.frame()
temp2 = data.frame()
# Find annotations in this channel
anInd = which(annotations$Channel==allChans[j])
# if (length(anInd)>0){
#   whichBinsA = histc(unlist(smallSteps[anInd]),as.numeric(timeBins))
#   binswAnnots = timeBins[which(whichBinsA$cnt>=(minCount/0.1))]
# } else {
#   whichBinsA = numeric()
#   binswAnnots = numeric()
# }
if (length(anInd)>0){
whichBinsA = numeric()
for (k in 1:length(anInd)){
whichStart = which(timeBins<=annotations$StartTime[anInd[k]]) # which bin contains annotation start time
whichStart = whichStart[length(whichStart)]
whichEnd = which(timeBins>=annotations$EndTime[anInd[k]]) # which bin contains annotation end time
whichEnd = whichEnd[1]
if (whichEnd-whichStart==1){ # if annotation falls within a single bin
whichBinsA = c(whichBinsA,whichStart)
} else if (whichEnd-whichStart>1){ # if annotation spans more than one bin, only count bins that have enough of the annotation in them
if (timeBins[whichStart+1]-annotations$StartTime[anInd[k]] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichStart)
}
if (whichEnd-whichStart>2){
whichBinsA = c(whichBinsA,seq(whichStart+1,whichEnd-2,by=1))
}
if (annotations$EndTime[anInd[k]]-timeBins[whichEnd-1] >= minO*annotations$Delta.Time..s.[anInd[k]]){
whichBinsA = c(whichBinsA,whichEnd-1)
}
}
}
binswAnnots = timeBins[whichBinsA]
} else {
whichBinsA = numeric()
binswAnnots = numeric()
}
# In case of multiple annotations occurring in the same bin, remove duplicate bin counts
binswAnnots = unique(binswAnnots)
# Determine which bins have detections in this channel
detInd = which(detections$Channel==allChans[j])
whichBinsD = histc(as.numeric(detections$StartTime[detInd]),as.numeric(timeBins))
binswDets = timeBins[which(whichBinsD$cnt>0)]
sharedCalls = intersect(binswAnnots,binswDets)
missedCalls = setdiff(binswAnnots,as_datetime(sharedCalls))
badDets = setdiff(binswDets,sharedCalls)
trueAbs = setdiff(timeBins,c(sharedCalls,missedCalls,badDets))
TP = TP + length(sharedCalls)
FN = FN + length(missedCalls)
FP = FP + length(badDets)
TN = TN + length(trueAbs)
TPind = which(detections$StartTime[detInd] %in% sharedCalls)
FPind = which(detections$StartTime[detInd] %in% badDets)
if (length(detInd)>0){ # start collecting information for this channel
temp1 = data.frame(TimeBin = binswDets) # time bin
temp1$Channel = allChans[j]             # channel
temp1$True = 0                          # Was there a call truly present?
temp1$True[TPind] = 1
temp1$Detected = 1                      # Was a call detected?
temp1$Conf = detections$Score[detInd]   # confidence scores of detections
}
if (length(missedCalls)>0){
temp2 = data.frame(TimeBin = as_datetime(missedCalls))
temp2$Channel = allChans[j]
temp2$True = 1
temp2$Detected = 0
temp2$Conf = NA
}
if (j==1){
eval(parse(text=paste(d,' = rbind(temp1,temp2)',sep="")))
} else {
eval(parse(text=paste(d,' = do.call(\"rbind\",list(',d,',temp1,temp2))',sep="")))
}
}
source("~/GitHub/HudsonProject/calcTPFPTN_detectorVSmanual.R")
84/(84+664)
44/(44+453)
47/(47+99)
